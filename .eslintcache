[{"C:\\Users\\Азамат\\Desktop\\project\\src\\index.tsx":"1","C:\\Users\\Азамат\\Desktop\\project\\src\\App.tsx":"2","C:\\Users\\Азамат\\Desktop\\project\\src\\components\\index.ts":"3","C:\\Users\\Азамат\\Desktop\\project\\src\\components\\Dropdown.tsx":"4","C:\\Users\\Азамат\\Desktop\\project\\src\\components\\Logo.tsx":"5","C:\\Users\\Азамат\\Desktop\\project\\src\\components\\Header.tsx":"6","C:\\Users\\Азамат\\Desktop\\project\\src\\components\\Search.tsx":"7","C:\\Users\\Азамат\\Desktop\\project\\src\\pages\\index.ts":"8","C:\\Users\\Азамат\\Desktop\\project\\src\\pages\\Home.tsx":"9","C:\\Users\\Азамат\\Desktop\\project\\src\\pages\\Signin.tsx":"10","C:\\Users\\Азамат\\Desktop\\project\\src\\pages\\Signup.tsx":"11","C:\\Users\\Азамат\\Desktop\\project\\src\\components\\Card.tsx":"12","C:\\Users\\Азамат\\Desktop\\project\\src\\redux\\store.ts":"13","C:\\Users\\Азамат\\Desktop\\project\\src\\redux\\reducers\\index.ts":"14","C:\\Users\\Азамат\\Desktop\\project\\src\\redux\\reducers\\auth.ts":"15","C:\\Users\\Азамат\\Desktop\\project\\src\\redux\\actions\\auth.ts":"16","C:\\Users\\Азамат\\Desktop\\project\\src\\api\\api.ts":"17","C:\\Users\\Азамат\\Desktop\\project\\src\\helpers\\axios.ts":"18","C:\\Users\\Азамат\\Desktop\\project\\src\\helpers\\notification.ts":"19","C:\\Users\\Азамат\\Desktop\\project\\src\\types\\interfaces.ts":"20"},{"size":415,"mtime":1612688090641,"results":"21","hashOfConfig":"22"},{"size":3802,"mtime":1612804951221,"results":"23","hashOfConfig":"22"},{"size":227,"mtime":1612804132377,"results":"24","hashOfConfig":"22"},{"size":2089,"mtime":1612801547200,"results":"25","hashOfConfig":"22"},{"size":405,"mtime":1612109789518,"results":"26","hashOfConfig":"22"},{"size":2452,"mtime":1612801409163,"results":"27","hashOfConfig":"22"},{"size":1376,"mtime":1611323445461,"results":"28","hashOfConfig":"22"},{"size":137,"mtime":1611239967134,"results":"29","hashOfConfig":"22"},{"size":3143,"mtime":1612171841881,"results":"30","hashOfConfig":"22"},{"size":4305,"mtime":1612804049042,"results":"31","hashOfConfig":"22"},{"size":8036,"mtime":1612803280144,"results":"32","hashOfConfig":"22"},{"size":1245,"mtime":1612804140391,"results":"33","hashOfConfig":"22"},{"size":642,"mtime":1612698153485,"results":"34","hashOfConfig":"22"},{"size":232,"mtime":1612697924205,"results":"35","hashOfConfig":"22"},{"size":2243,"mtime":1612804090292,"results":"36","hashOfConfig":"22"},{"size":4031,"mtime":1612804096692,"results":"37","hashOfConfig":"22"},{"size":532,"mtime":1612727436996,"results":"38","hashOfConfig":"22"},{"size":107,"mtime":1612804233423,"results":"39","hashOfConfig":"22"},{"size":270,"mtime":1612719898836,"results":"40","hashOfConfig":"22"},{"size":530,"mtime":1612691854885,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"cf7ur5",{"filePath":"45","messages":"46","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Азамат\\Desktop\\project\\src\\index.tsx",[],["86","87"],"C:\\Users\\Азамат\\Desktop\\project\\src\\App.tsx",["88","89","90","91","92"],"C:\\Users\\Азамат\\Desktop\\project\\src\\components\\index.ts",[],"C:\\Users\\Азамат\\Desktop\\project\\src\\components\\Dropdown.tsx",[],"C:\\Users\\Азамат\\Desktop\\project\\src\\components\\Logo.tsx",[],"C:\\Users\\Азамат\\Desktop\\project\\src\\components\\Header.tsx",["93"],"import React from 'react';\r\nimport { Dropdown, Logo, Search } from './index';\r\nimport { Link } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { TAppState } from '../redux/reducers/index';\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport \"../styles/components/Header.scss\";\r\n\r\nconst dropdownElements = [\r\n    {\r\n        title: 'Frontend',\r\n        href: '/'\r\n    },\r\n    {\r\n        title: 'Backend',\r\n        href: '/'\r\n    }\r\n];\r\n\r\nconst profileDropdownElemenets = [\r\n    {\r\n        title: 'Личный кабинет',\r\n        href: '/cabinet'\r\n    },\r\n    {\r\n        title: 'Закладки',\r\n        href: '/booking'\r\n    },\r\n    {\r\n        title: 'История',\r\n        href: '/history'\r\n    },\r\n    {\r\n        title: 'Выйти',\r\n        href: '/logout'\r\n    }\r\n];\r\n\r\n\r\nconst Header = () => {\r\n\r\n    const isAuthorized = useSelector((state: TAppState) => state.auth.isAuthorized);\r\n    const el = <><UserOutlined /> <span className=\"text\">Профиль</span></>\r\n\r\n    return (\r\n        <header className=\"header\">\r\n            <div className=\"header__container _container\">\r\n                <div className=\"header__left left-header\">\r\n                    <Logo />\r\n                    <Dropdown\r\n                        dropdownTitle={\"Категории\"}\r\n                        dropdownElements={dropdownElements}\r\n                    />\r\n                    <a className=\"left-header__item\" href=\"#\">\r\n                        Все курсы\r\n                    </a>\r\n                </div>\r\n                <div className=\"header__right right-header\">\r\n                    <span className=\"right-header__icon\"><Search /></span>\r\n                    {\r\n                        !isAuthorized ? <>\r\n                            <Link className=\"mybutton right-header__signup\" to=\"/signup\">Регистрация</Link>\r\n                            <Link className=\"mybutton right-header__signin\" to=\"/signin\">Войти</Link>\r\n                        </> : <>\r\n                                <Dropdown\r\n                                    dropdownTitle={el}\r\n                                    dropdownElements={profileDropdownElemenets}\r\n                                    className=\"profile\"\r\n                                />\r\n                            </>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </header>\r\n    )\r\n};\r\n\r\nexport default Header;","C:\\Users\\Азамат\\Desktop\\project\\src\\components\\Search.tsx",[],"C:\\Users\\Азамат\\Desktop\\project\\src\\pages\\index.ts",[],"C:\\Users\\Азамат\\Desktop\\project\\src\\pages\\Home.tsx",[],"C:\\Users\\Азамат\\Desktop\\project\\src\\pages\\Signin.tsx",["94","95"],"import React, { useEffect } from 'react';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\nimport { ILoginInfo } from '../types/interfaces';\r\nimport { useFormik } from 'formik';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { FormikErrors } from 'formik';\r\nimport { login } from '../redux/actions/auth';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { TAppState } from '../redux/reducers/index';\r\n\r\nconst Signin = () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const authInfo = useSelector((state: TAppState) => state.auth.authenticatedInfo);\r\n\r\n    useEffect(() => {\r\n        if (authInfo.token) history.push('/');\r\n    }, [authInfo.token]);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\"\r\n        },\r\n        validate: (values: ILoginInfo) => {\r\n            const errors: FormikErrors<ILoginInfo> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Обязательное поле';\r\n            } else if (!/^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[A-Za-z]+$/.test(values.email)) {\r\n                errors.email = \"Не правильный логин\";\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = \"Обязательное поле\";\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: (values: ILoginInfo, { setFieldError }) => {\r\n            dispatch(login(values.email!, values.password!, setFieldError));\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div className=\"auth\">\r\n            <div className=\"auth__form\">\r\n                <h3 className=\"auth__title\">Войти в аккуант</h3>\r\n                <Form onFinish={formik.handleSubmit} >\r\n                    <Form.Item\r\n                        name=\"email\"\r\n                        hasFeedback={formik.touched.email}\r\n                        validateStatus={formik.touched.email && formik.errors.email ? 'error' : 'success'}\r\n                        help={formik.errors.email && formik.errors.email}\r\n                    >\r\n                        <Input\r\n                            prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n                            placeholder=\"Логин\"\r\n                            className=\"signin-input\"\r\n                            value={formik.values.email!}\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        name=\"password\"\r\n                        hasFeedback={formik.touched.password}\r\n                        validateStatus={formik.touched.password && formik.errors.password ? 'error' : 'success'}\r\n                        help={formik.errors.password && formik.errors.password}\r\n                    >\r\n                        <Input.Password\r\n                            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                            type=\"password\"\r\n                            placeholder=\"Пароль\"\r\n                            className=\"signin-input\"\r\n                            allowClear\r\n                            value={formik.values.email!}\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                    </Form.Item>\r\n                    <a href=\"#\" className=\"forget-password\" >  Забыли пароль ?</a>\r\n                    <Form.Item>\r\n                        <Button\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            className=\"login-form-button mybutton mybutton_rounded\"\r\n                            disabled={!formik.isValid || !formik.dirty}\r\n                        >\r\n                            Войти\r\n                        </Button>\r\n                        <Link to=\"/signup\" className=\"signup-link\">Зарегистрироваться</Link>\r\n                    </Form.Item>\r\n                </Form>\r\n            </div>\r\n        </div >\r\n    )\r\n};\r\n\r\nexport default Signin;","C:\\Users\\Азамат\\Desktop\\project\\src\\pages\\Signup.tsx",["96"],"import React from 'react';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { UserOutlined, LockOutlined, FormOutlined, MailOutlined } from '@ant-design/icons';\r\nimport { Link } from 'react-router-dom';\r\nimport { IRegisterInfo } from '../types/interfaces';\r\nimport { useFormik } from 'formik';\r\nimport { FormikErrors } from 'formik';\r\nimport { useDispatch } from 'react-redux';\r\nimport { register } from '../redux/actions/auth';\r\nimport { useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { TAppState } from '../redux/reducers/index';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { actionCreators } from '../redux/actions/auth';\r\n\r\nconst Signup = () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const isRegistered = useSelector((state: TAppState) => state.auth.isRegistered);\r\n\r\n    useEffect(() => {\r\n        if (isRegistered)\r\n            history.push('/signin');\r\n\r\n        return () => {\r\n            dispatch(actionCreators.registerDataReset());\r\n        }\r\n    }, [isRegistered]);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            first_name: \"\",\r\n            last_name: \"\",\r\n            password: \"\",\r\n            repeatPassword: \"\"\r\n        },\r\n        validate: (values: IRegisterInfo) => {\r\n            const errors: FormikErrors<IRegisterInfo> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Обзательное поле';\r\n            } else if (!/^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[A-Za-z]+$/.test(values.email)) {\r\n                errors.email = \"Не правильный логин\";\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = \"Обязательное поле\";\r\n            } else if (values.password.length <= 5) {\r\n                errors.password = \"Пароль должен быть не менее 5 символов\";\r\n            }\r\n\r\n            if (!values.repeatPassword) {\r\n                errors.repeatPassword = \"Обязательное поле\";\r\n            } else if (values.repeatPassword.length <= 5) {\r\n                errors.repeatPassword = \"Пароль должен быть не менее 5 символов\";\r\n            } else if (values.repeatPassword !== values.password) {\r\n                errors.repeatPassword = \"Пароли не совпадают\";\r\n            }\r\n\r\n            if (!values.first_name) {\r\n                errors.first_name = \"Обязательное поле\";\r\n            }\r\n\r\n            if (!values.last_name) {\r\n                errors.last_name = \"Обязательное поле\";\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: (values: IRegisterInfo, { setFieldError }) => {\r\n            dispatch(register(values.email!, values.first_name!, values.last_name!, values.password!, setFieldError));\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div className=\"auth\">\r\n            <div className=\"auth__form\">\r\n                <h3 className=\"auth__title\">Зарегистрироваться</h3>\r\n                <Form onFinish={formik.handleSubmit} >\r\n                    <Form.Item\r\n                        name=\"first_name\"\r\n                        hasFeedback={formik.touched.first_name}\r\n                        validateStatus={formik.touched.first_name && formik.errors.first_name ? 'error' : 'success'}\r\n                        help={formik.errors.first_name && formik.errors.first_name}\r\n                    >\r\n                        <Input\r\n                            prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n                            placeholder=\"Name\"\r\n                            value={formik.values.first_name!}\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        name=\"last_name\"\r\n                        hasFeedback={formik.touched.last_name}\r\n                        validateStatus={formik.touched.last_name && formik.errors.last_name ? 'error' : 'success'}\r\n                        help={formik.errors.last_name && formik.errors.last_name}\r\n                    >\r\n                        <Input\r\n                            prefix={<FormOutlined className=\"site-form-item-icon\" />}\r\n                            placeholder=\"Surname\"\r\n                            value={formik.values.last_name!}\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        name=\"email\"\r\n                        hasFeedback={formik.touched.email}\r\n                        validateStatus={formik.touched.email && formik.errors.email ? 'error' : 'success'}\r\n                        help={formik.errors.email && formik.errors.email}\r\n                    >\r\n                        <Input\r\n                            prefix={<MailOutlined className=\"site-form-item-icon\" />}\r\n                            placeholder=\"Email\"\r\n                            value={formik.values.email!}\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        name=\"password\"\r\n                        hasFeedback={formik.touched.password}\r\n                        validateStatus={formik.touched.password && formik.errors.password ? 'error' : 'success'}\r\n                        help={formik.errors.password && formik.errors.password}\r\n                    >\r\n                        <Input.Password\r\n                            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                            type=\"password\"\r\n                            placeholder=\"Password\"\r\n                            allowClear\r\n                            value={formik.values.password!}\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        name=\"repeatPassword\"\r\n                        hasFeedback={formik.touched.repeatPassword}\r\n                        validateStatus={formik.touched.repeatPassword && formik.errors.repeatPassword ? 'error' : 'success'}\r\n                        help={formik.errors.repeatPassword && formik.errors.repeatPassword}\r\n                    >\r\n                        <Input.Password\r\n                            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                            type=\"password\"\r\n                            placeholder=\"Password\"\r\n                            allowClear\r\n                            value={formik.values.repeatPassword!}\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <div className=\"center\">\r\n                            <Button\r\n                                type=\"primary\"\r\n                                htmlType=\"submit\"\r\n                                className=\"mybutton mybutton_block mybutton_rounded\"\r\n                                disabled={!formik.isValid || !formik.dirty}\r\n                            >\r\n                                Зарегистрироваться\r\n                    </Button>\r\n                        </div>\r\n                    </Form.Item>\r\n                    <div className=\"signin-link\">\r\n                        <Link to=\"/signin\" >Войти на сайт</Link>\r\n                    </div>\r\n                </Form>\r\n            </div>\r\n        </div >\r\n    )\r\n};\r\n\r\nexport default Signup;","C:\\Users\\Азамат\\Desktop\\project\\src\\components\\Card.tsx",[],"C:\\Users\\Азамат\\Desktop\\project\\src\\redux\\store.ts",[],"C:\\Users\\Азамат\\Desktop\\project\\src\\redux\\reducers\\index.ts",[],"C:\\Users\\Азамат\\Desktop\\project\\src\\redux\\reducers\\auth.ts",[],"C:\\Users\\Азамат\\Desktop\\project\\src\\redux\\actions\\auth.ts",[],"C:\\Users\\Азамат\\Desktop\\project\\src\\api\\api.ts",[],"C:\\Users\\Азамат\\Desktop\\project\\src\\helpers\\axios.ts",[],"C:\\Users\\Азамат\\Desktop\\project\\src\\helpers\\notification.ts",[],"C:\\Users\\Азамат\\Desktop\\project\\src\\types\\interfaces.ts",[],{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":59,"column":19,"nodeType":"103","endLine":59,"endColumn":67},{"ruleId":"101","severity":1,"message":"102","line":62,"column":19,"nodeType":"103","endLine":62,"endColumn":67},{"ruleId":"101","severity":1,"message":"102","line":65,"column":19,"nodeType":"103","endLine":65,"endColumn":67},{"ruleId":"101","severity":1,"message":"102","line":68,"column":19,"nodeType":"103","endLine":68,"endColumn":67},{"ruleId":"101","severity":1,"message":"102","line":71,"column":19,"nodeType":"103","endLine":71,"endColumn":67},{"ruleId":"101","severity":1,"message":"102","line":54,"column":21,"nodeType":"103","endLine":54,"endColumn":63},{"ruleId":"104","severity":1,"message":"105","line":19,"column":8,"nodeType":"106","endLine":19,"endColumn":24,"suggestions":"107"},{"ruleId":"101","severity":1,"message":"102","line":82,"column":21,"nodeType":"103","endLine":82,"endColumn":62},{"ruleId":"104","severity":1,"message":"108","line":28,"column":8,"nodeType":"106","endLine":28,"endColumn":22,"suggestions":"109"},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["112"],"React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.",["113"],"no-global-assign","no-unsafe-negation",{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},"Update the dependencies array to be: [authInfo.token, history]",{"range":"118","text":"119"},"Update the dependencies array to be: [dispatch, history, isRegistered]",{"range":"120","text":"121"},[759,775],"[authInfo.token, history]",[1050,1064],"[dispatch, history, isRegistered]"]